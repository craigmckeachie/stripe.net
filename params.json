{"name":"Stripe.net","tagline":"Stripe.net is a full service .net api for http://stripe.com. See the readme below for examples on how to use it.","body":"![stripe.net](http://i.imgur.com/9UzKGQd.png)  \r\n  \r\nIf you would like to donate to help support stripe.net, my paypal address is jaymedavis@gmail.com. It's certainly not required, but I would appreciate it. :)  \r\n  \r\n##**If you would like to submit a pull request.**\r\nFirst, thank you! It is a lot of work to learn someone else's codebase, so I appreciate it. Here are a few things that would help me out:\r\n* Do not submit pull requests for more than one fix. Keep them small and focused.\r\n* Please code review yourself. There are a lot of pull requests with typos and mistakes. Don't worry, we all do it. But a code review of yourself will help. :)\r\n* Please review the diff in GitHub that I will see before I merge your pull requests. If it's hard for you to tell what the differences are, it's going to be hard for me too.\r\n\r\nQuick Start\r\n-----------\r\n\r\nIt is recommended that you install Stripe.net via NuGet. If you wish to build it yourself via build.cmd, you will need\r\nruby installed along with the gems albacore and zip. You could also just build the assembly in Visual Studio by opening the solution and compiling.\r\n\r\nAdd a reference to Stripe.net.dll.\r\n\r\nNext you will need to provide Stripe.net with your api key. There are 4 ways to do this:\r\n\r\na) Add an AppSetting with your api key to your config (this is the easiest way and will work throughout the app on every request)\r\n\r\n\t<appSettings>\r\n\t...\r\n\t\t<add key=\"StripeApiKey\" value=\"[your api key here]\" />\r\n\t...\r\n\t</appSettings>\r\n\r\nb) In your application initialization, call this method (this is a programmatic way, but you only have to do it once during startup)\r\n\r\n\tStripeConfiguration.SetApiKey(\"[your api key here]\");\r\n\r\nc) In any of the service constructors, you can optionally pass the api key (will be assigned that apikey for the life of the service instance).\r\n\r\n\tvar planService = new StripePlanService(\"[your api key here]\");\r\n\r\nd) In any of the service calls, you can pass a [StripeRequestOptions](#striperequestoptions) object with the apikey specified.\r\n\r\n\tvar planService = new StripePlanService();\r\n\tplanService.Get(*planId*, new StripeRequestOptions() { ApiKey = \"[your api key here]\" });\r\n\r\nStripe API Version\r\n------------------\r\n\r\nStripe.net forces a version of the Stripe API for which it was designed. You can find out the latest version supported by viewing StripeConfiguration.cs under the Infrastructure folder.\r\n\r\nExamples\r\n========\r\n\r\nPlans\r\n-----\r\n\r\n### Creating a plan\r\n\r\nIf your site has multiple offerings, plans are perfect. You can create as many plans as you want and then just assign customers to those plans later on.\r\n\r\n\tvar myPlan = new StripePlanCreateOptions();\r\n\tmyPlan.Amount = 1000;           // all amounts on Stripe are in cents, pence, etc\r\n\tmyPlan.Currency = \"usd\";        // \"usd\" only supported right now\r\n\tmyPlan.Interval = \"month\";      // \"month\" or \"year\"\r\n\tmyPlan.IntervalCount = 1;       // optional\r\n\tmyPlan.Name = \"Bronze\";\r\n\tmyPlan.TrialPeriodDays = 30;    // amount of time that will lapse before the customer is billed\r\n\r\n\tvar planService = new StripePlanService();\r\n\tStripePlan response = planService.Create(myPlan);\r\n\r\nThe returned StripePlan entity above will have a unique Id. You will want to persist this for later. When you create a customer you will be able to assign them\r\nto a plan id (or not)\r\n\r\n### Updating a plan\r\n\r\n\tvar myPlan = new StripePlanUpdateOptions();\r\n\r\n\tmyPlan.Name = \"NEW Plan YO!\";\r\n\r\n\tvar planService = new StripePlanService();\r\n\tStripePlan response = planService.Update(*planId*, myPlan);\r\n\r\n### Retrieving a plan\r\n\r\n\tvar planService = new StripePlanService();\r\n\tStripePlan response = planService.Get(*planId*);\r\n\r\n### Deleting a plan\r\n\r\n\tvar planService = new StripePlanService();\r\n\tplanService.Delete(*planId*);\r\n\r\n### List all plans\r\n\r\n\tvar planService = new StripePlanService();\r\n\tIEnumerable<StripePlan> response = planService.List(); // optional StripeListOptions\r\n\r\n[StripeListOptions](#stripelistoptions-paging) for paging\r\n\r\nCoupons (queue-pons not coo-pons)\r\n---------------------------------\r\n\r\n### Creating a coupon\r\n\r\n\tvar myCoupon = new StripeCouponCreateOptions();\r\n\tmyCoupon.Id = \"HOLIDAY10OFF\";\r\n\tmyCoupon.PercentOff = \"10\";\r\n\tmyCoupon.Duration = \"repeating\";    // \"forever\", \"once\", or \"repeating\"\r\n\tmyCoupon.DurationInMonths = 3;      // valid when \"repeating\" only\r\n\r\n\t// set these if you want to\r\n\tmyCoupon.MaxRedemptions = 100;\r\n\tmyCoupon.RedeemBy = '12/31/2012';\r\n\r\n\tvar couponService = new StripeCouponService();\r\n\tStripeCoupon response = couponService.Create(myCoupon);\r\n\r\n### Retrieving a coupon\r\n\r\n\tvar couponService = new StripeCouponService();\r\n\tStripeCoupon response = couponService.Get(*couponId*);\r\n\r\n### Deleting a coupon\r\n\r\n\tvar couponService = new StripeCouponService();\r\n\tcouponService.Delete(*couponId*);\r\n\r\n### List all coupons\r\n\r\n\tvar couponService = new StripeCouponService();\r\n\tIEnumerable<StripeCoupon> response = couponService.List();  // optional StripeListOptions\r\n\r\n[StripeListOptions](#stripelistoptions-paging) for paging\r\n\r\nTokens\r\n------\r\n\r\n### Creating a token\r\n\r\nA token can be used anywhere on Stripe where you would normally pass a card. Once it's created, it can be used on a\r\ncustomer or a charge, but only used once.\r\n\r\n\tvar myToken = new StripeTokenCreateOptions();\r\n\r\n\t// if you need this...\r\n\tmyToken.Card = new StripeCreditCardOptions()\r\n\t{\r\n\t\t// set these properties if passing full card details (do not\r\n\t\t// set these properties if you set TokenId)\r\n\t\tNumber = \"4242424242424242\",\r\n\t\tExpirationYear = \"2022\",\r\n\t\tExpirationMonth = \"10\",\r\n\t\tAddressCountry = \"US\",                // optional\r\n\t\tAddressLine1 = \"24 Beef Flank St\",    // optional\r\n\t\tAddressLine2 = \"Apt 24\",              // optional\r\n\t\tAddressCity = \"Biggie Smalls\",        // optional\r\n\t\tAddressState = \"NC\",                  // optional\r\n\t\tAddressZip = \"27617\",                 // optional\r\n\t\tName = \"Joe Meatballs\",               // optional\r\n\t\tCvc = \"1223\"                          // optional\r\n\t};\r\n\r\n\t// set this property if using a customer (stripe connect only)\r\n\tmyToken.CustomerId = *customerId*;\r\n\r\n\tvar tokenService = new StripeTokenService();\r\n\tStripeToken stripeToken = tokenService.Create(myToken);\r\n\r\nTokens are very useful if you don't want to store the customers credit card information on your servers (pci compliance).\r\n\r\n### Retrieving a token\r\n\r\n\tvar tokenService = new StripeTokenService();\r\n\tStripeToken stripeToken = tokenService.Get(*tokenId*);\r\n\r\nCustomers\r\n---------\r\n\r\n### Creating a customer\r\n\r\nWhen creating a customer, you can specify any plan they are on, any coupons that will apply,\r\na credit card or token, and various meta data.\r\n\r\n\tvar myCustomer = new StripeCustomerCreateOptions();\r\n\r\n\t// set these properties if it makes you happy\r\n\tmyCustomer.Email = \"pork@email.com\";\r\n\tmyCustomer.Description = \"Johnny Tenderloin (pork@email.com)\";\r\n\r\n\t// setting up the card\r\n\tmyCustomer.Source = new StripeSourceOptions()\r\n\t{\r\n\t\t// set this property if using a token\r\n\t\tTokenId = *tokenId*,\r\n\r\n\t\t// set these properties if passing full card details (do not\r\n\t\t// set these properties if you set TokenId)\r\n\t\tNumber = \"4242424242424242\",\r\n\t\tExpirationYear = \"2022\",\r\n\t\tExpirationMonth = \"10\",\r\n\t\tAddressCountry = \"US\",                // optional\r\n\t\tAddressLine1 = \"24 Beef Flank St\",    // optional\r\n\t\tAddressLine2 = \"Apt 24\",              // optional\r\n\t\tAddressCity = \"Biggie Smalls\",        // optional\r\n\t\tAddressState = \"NC\",                  // optional\r\n\t\tAddressZip = \"27617\",                 // optional\r\n\t\tName = \"Joe Meatballs\",               // optional\r\n\t\tCvc = \"1223\"                          // optional\r\n\t}\r\n\r\n\tmyCustomer.PlanId = *planId*;                          // only if you have a plan\r\n\tmyCustomer.TaxPercent = 20;                            // only if you are passing a plan, this tax percent will be added to the price.\r\n\tmyCustomer.Coupon = *couponId*;                        // only if you have a coupon\r\n\tmyCustomer.TrialEnd = DateTime.UtcNow.AddMonths(1);    // when the customers trial ends (overrides the plan if applicable)\r\n\tmyCustomer.Quantity = 1;                               // optional, defaults to 1\r\n\r\n\tvar customerService = new StripeCustomerService();\r\n\tStripeCustomer stripeCustomer = customerService.Create(myCustomer);\r\n\r\nDon't let this be intimidating - all of these fields are optional. You could just create a customer with an email if you wanted.\r\n\r\n### Updating a customer\r\n\r\n\tvar myCustomer = new StripeCustomerUpdateOptions();\r\n\r\n\t// set these properties if it makes you happy\r\n\tmyCustomer.Email = \"pork@email.com\";\r\n\tmyCustomer.Description = \"Johnny Tenderloin (pork@email.com)\";\r\n\r\n\t// setting up the card\r\n\tmyCustomer.Source = new StripeSourceOptions()\r\n\t{\r\n\t\t// set this property if using a token\r\n\t\tTokenId = *tokenId*,\r\n\r\n\t\t// set these properties if passing full card details (do not\r\n\t\t// set these properties if you set TokenId)\r\n\t\tNumber = \"4242424242424242\",\r\n\t\tExpirationYear = \"2022\",\r\n\t\tExpirationMonth = \"10\",\r\n\t\tAddressCountry = \"US\",                // optional\r\n\t\tAddressLine1 = \"24 Beef Flank St\",    // optional\r\n\t\tAddressLine2 = \"Apt 24\",              // optional\r\n\t\tAddressCity = \"Biggie Smalls\",        // optional\r\n\t\tAddressState = \"NC\",                  // optional\r\n\t\tAddressZip = \"27617\",                 // optional\r\n\t\tName = \"Joe Meatballs\",               // optional\r\n\t\tCvc = \"1223\"                          // optional\r\n\t}\r\n\r\n\t// this will set the default card to use for this customer\r\n\tmyCustomer.DefaultSource = *cardId*;\r\n\r\n\tmyCustomer.Coupon = *couponId*;    // only if you have a coupon\r\n\r\n\tvar customerService = new StripeCustomerService();\r\n\tStripeCustomer stripeCustomer = customerService.Update(*customerId*, myCustomer);\r\n\r\n### Retrieving a customer\r\n\r\n\tvar customerService = new StripeCustomerService();\r\n\tStripeCustomer stripeCustomer = customerService.Get(*customerId*);\r\n\r\n### Deleting a customer\r\n\r\n\tSee Stripe's documentation on deleting a customer for more information.\r\n\r\n\tvar customerService = new StripeCustomerService();\r\n\tcustomerService.Delete(*customerId*);\r\n\r\n### List all customers\r\n\r\n\tvar customerService = new StripeCustomerService();\r\n\tIEnumerable<StripeCustomer> response = customerService.List(); // optional StripeCustomerListOptions\r\n\r\nStripeCustomerListOptions supports [StripeListOptions](#stripelistoptions-paging) for paging, and a [StripeDateFilter](#stripedatefilter-date-filtering) for date filtering\r\n\r\nSubscriptions\r\n-------------\r\n\r\n### Creating a subscription\r\n\r\n\tvar subscriptionService = new StripeSubscriptionService();\r\n\tStripeSubscription stripeSubscription = subscriptionService.Create(*customerId*, *planId*); // optional StripeSubscriptionCreateOptions\r\n\r\n### Updating a subscription\r\n\r\n\tvar subscriptionService = new StripeSubscriptionService();\r\n\tStripeSubscription stripeSubscription = subscriptionService.Update(*customerId*, *subscriptionId*); // optional StripeSubscriptionUpdateOptions\r\n\r\n### Retrieving a subscription\r\n\r\n\tvar subscriptionService = new StripeSubscriptionService();\r\n\tStripeSubscription stripeSubscription = subscriptionService.Get(*customerId*, *subscriptionId*);\r\n\r\n### Canceling a subscription\r\n\r\n\tvar subscriptionService = new StripeSubscriptionService();\r\n\tsubscriptionService.Cancel(*customerId*, *subscriptionId*); // optional cancelAtPeriodEnd flag\r\n\r\n### List all subscriptions for a customer\r\n\r\n\tvar subscriptionService = new StripeSubscriptionService();\r\n\tIEnumerable<StripeSubscription> response = subscriptionService.List(*customerId*); // optional StripeListOptions\r\n\r\n[StripeListOptions](#stripelistoptions-paging) for paging\r\n\r\nCards\r\n-----\r\n\r\n### Creating a card\r\n\r\nWhen creating a card you can use either a card or a token\r\n\r\n\tvar myCard = new StripeCardCreateOptions();\r\n\r\n\t// setting up the card\r\n\tmyCard.Source = new StripeSourceOptions()\r\n\t{\r\n\t\t// set this property if using a token\r\n\t\tTokenId = *tokenId*,\r\n\r\n\t\t// set these properties if passing full card details (do not\r\n\t\t// set these properties if you set TokenId)\r\n\t\tNumber = \"4242424242424242\",\r\n\t\tExpirationYear = \"2022\",\r\n\t\tExpirationMonth = \"10\",\r\n\t\tAddressCountry = \"US\",                // optional\r\n\t\tAddressLine1 = \"24 Beef Flank St\",    // optional\r\n\t\tAddressLine2 = \"Apt 24\",              // optional\r\n\t\tAddressCity = \"Biggie Smalls\",        // optional\r\n\t\tAddressState = \"NC\",                  // optional\r\n\t\tAddressZip = \"27617\",                 // optional\r\n\t\tName = \"Joe Meatballs\",               // optional\r\n\t\tCvc = \"1223\"                          // optional\r\n\t}\r\n\r\n\tvar cardService = new StripeCardService();\r\n\tStripeCard stripeCard = cardService.Create(*customerId*, myCard); // optional isRecipient\r\n\r\n### Retrieving a card\r\n\r\n\tvar cardService = new StripeCardService();\r\n\tStripeCard stripeCard = cardService.Get(*customerId*, *cardId*); // optional isRecipient\r\n\r\n### Updating a card\r\n\r\n\tvar myCard = new StripeCardUpdateOptions();\r\n\r\n\tmyCard.Name = \"Cardy MyCardson\"\r\n\tmyCard.ExpirationYear = \"2016\";\r\n\tmyCard.ExpirationMonth = \"10\";\r\n\tmyCard.AddressCountry = \"US\";\r\n\tmyCard.AddressLine1 = \"1234 ComeOnBabySayYouLoveMe St\";\r\n\tmyCard.AddressLine2 = \"\";\r\n\tmyCard.AddressState = \"NC\";\r\n\tmyCard.AddressCity = \"Raleigh\"\r\n\tmyCard.AddressZip = \"27617\";\r\n\r\n\tvar cardService = new StripeCardService();\r\n\tStripeCard stripeCard = cardService.Update(*customerId*, *cardId*, myCard); // optional isRecipient\r\n\r\n### Deleting a card\r\n\r\n\tvar cardService = new StripeCardService();\r\n\tcardService.Delete(*customerId*, *cardId*); // optional isRecipient\r\n\r\n### List all cards\r\n\r\n\tvar cardService = new StripeCardService();\r\n\tIEnumerable<StripeCard> response = cardService.List(*customerId*); // optional StripeListOptions and isRecipient\r\n\r\n[StripeListOptions](#stripelistoptions-paging) for paging\r\n\r\nCharges\r\n-------\r\n\r\n### Creating a charge\r\n\r\nWhen creating a charge you can use either a card, customer, or a token. Only one is allowed.\r\n\r\n\tvar myCharge = new StripeChargeCreateOptions();\r\n\r\n\t// always set these properties\r\n\tmyCharge.Amount = 5153;\r\n\tmyCharge.Currency = \"usd\";\r\n\r\n\t// set this if you want to\r\n\tmyCharge.Description = \"Charge it like it's hot\";\r\n\r\n\t// setting up the card\r\n\tmyCharge.Source = new StripeSourceOptions()\r\n\t{\r\n\t\t// set this property if using a token\r\n\t\tTokenId = *tokenId*,\r\n\r\n\t\t// set these properties if passing full card details (do not\r\n\t\t// set these properties if you set TokenId)\r\n\t\tNumber = \"4242424242424242\",\r\n\t\tExpirationYear = \"2022\",\r\n\t\tExpirationMonth = \"10\",\r\n\t\tAddressCountry = \"US\",                // optional\r\n\t\tAddressLine1 = \"24 Beef Flank St\",    // optional\r\n\t\tAddressLine2 = \"Apt 24\",              // optional\r\n\t\tAddressCity = \"Biggie Smalls\",        // optional\r\n\t\tAddressState = \"NC\",                  // optional\r\n\t\tAddressZip = \"27617\",                 // optional\r\n\t\tName = \"Joe Meatballs\",               // optional\r\n\t\tCvc = \"1223\"                          // optional\r\n\t}\r\n\r\n\t// set this property if using a customer\r\n\tmyCharge.CustomerId = *customerId*;\r\n\r\n\t// set this if you have your own application fees (you must have your application configured first within Stripe)\r\n\tmyCharge.ApplicationFee = 25;\r\n\r\n\t// (not required) set this to false if you don't want to capture the charge yet - requires you call capture later\r\n\tmyCharge.Capture = true;\r\n\r\n\tvar chargeService = new StripeChargeService();\r\n\tStripeCharge stripeCharge = chargeService.Create(myCharge);\r\n\r\n### Retrieving a charge\r\n\r\n\tvar chargeService = new StripeChargeService();\r\n\tStripeCharge stripeCharge = chargeService.Get(*chargeId*);\r\n\r\n### Capturing a charge\r\n\r\nIf you set a charge to capture = false, you use this to capture the charge later. *amount* and *applicationFee* are not required.\r\n\r\n\tvar chargeService = new StripeChargeService();\r\n\tStripeCharge stripeCharge = chargeService.Capture(*chargeId*, *amount*, *applicationFee*);\r\n\r\n### List all charges\r\n\r\n\tvar chargeService = new StripeChargeService();\r\n\tIEnumerable<StripeCharge> response = chargeService.List(); // optional StripeChargeListOptions\r\n\r\nStripeChargeListOptions supports a CustomerId, [StripeListOptions](#stripelistoptions-paging) for paging, and a [StripeDateFilter](#stripedatefilter-date-filtering) for date filtering\r\n\r\nInvoices\r\n--------\r\n\r\n### Retrieving an invoice\r\n\r\n\tvar invoiceService = new StripeInvoiceService();\r\n\tStripeInvoice response = invoiceService.Get(*invoiceId*);\r\n\r\n### Retrieving an upcoming invoice (for a single customer)\r\n\r\n\tvar invoiceService = new StripeInvoiceService();\r\n\tStripeInvoice response = invoiceService.Upcoming(*customerId*);\r\n\r\n### Create a customer invoice\r\n\r\n\tvar invoiceService = new StripeInvoiceService();\r\n\tStripeInvoice response = invoiceService.Create(*customerId*); // optional StripeInvoiceCreateOptions\r\n\r\n### Updating a customer invoice\r\n\r\n\tvar stripeInvoiceUpdateOptions = new StripeInvoiceUpdateOptions();\r\n\tstripeInvoiceUpdateOptions.Closed = true;\r\n\r\n\tvar invoiceService = new StripeInvoiceService();\r\n\tStripeInvoice response = invoiceService.Update(*invoiceId*, stripeInvoiceUpdateOptions);\r\n\r\n### Paying an invoice\r\n\r\n\tvar invoiceService = new StripeInvoiceService();\r\n\tStripeInvoice response = invoiceService.Pay(*invoiceId*);\r\n\r\n### List all invoices\r\n\r\n\tvar invoiceService = new StripeInvoiceService();\r\n\tIEnumerable<StripeInvoice> response = invoiceService.List(); // optional StripeInvoiceListOptions\r\n\r\nStripeInvoiceListOptions supports a CustomerId, [StripeListOptions](#stripelistoptions-paging) for paging, and a [StripeDateFilter](#stripedatefilter-date-filtering) for date filtering\r\n\r\nInvoice Items\r\n-------------\r\n\r\n### Creating an invoice item\r\n\r\nAny invoice items you create for a customer will be added to their bill.\r\n\r\n\tvar myItem = new StripeInvoiceItemCreateOptions();\r\n\tmyItem.Amount = 1000;\r\n\tmyItem.Currency = \"usd\";            // \"usd\" only supported right now\r\n\tmyItem.CustomerId = *customerId*;\r\n\tmyItem.Description = \"na\";          // not required\r\n\r\n\tvar invoiceItemService = new StripeInvoiceItemService();\r\n\tStripeInvoiceItem response = invoiceItemService.Create(myItem);\r\n\r\n### Retrieving an invoice item\r\n\r\n\tvar invoiceItemService = new StripeInvoiceItemService();\r\n\tStripeInvoiceItem response = invoiceItemService.Get(*invoiceItemId*);\r\n\r\n### Updating an invoice item\r\n\r\n\tvar myUpdatedItem = new StripeInvoiceItemUpdateOptions();\r\n\tmyUpdatedItem.Amount = 1010;\r\n\tmyUpdatedItem.Currency = \"usd\";        // \"usd\" only supported right now\r\n\tmyUpdatedItem.Description = \"test\";    // not required\r\n\r\n\tvar invoiceItemService = new StripeInvoiceItemService();\r\n\tStripeInvoiceItem response = invoiceItemService.Update(*invoiceItemId*, myUpdatedItem);\r\n\r\n### Deleting an invoice item\r\n\r\n\tvar invoiceItemService = new StripeInvoiceItemService();\r\n\tinvoiceItemService.Delete(*invoiceItemId*);\r\n\r\n### List all invoice items\r\n\r\n\tvar invoiceItemService = new StripeInvoiceItemService();\r\n\tIEnumerable<StripeInvoiceItem> response = invoiceItemService.List(); // optional StripeInvoiceItemListOptions\r\n\r\nStripeInvoiceItemListOptions supports a CustomerId, [StripeListOptions](#stripelistoptions-paging) for paging, and a [StripeDateFilter](#stripedatefilter-date-filtering) for date filtering\r\n\r\nAccount\r\n-------\r\n\r\n### Retrieving your account\r\n\r\n\tvar accountService = new StripeAccountService();\r\n\tStripeAccount response = accountService.Get();\r\n\r\nBalance\r\n-------\r\n\r\n### Retrieving your account balance\r\n\r\n\tvar balanceService = new StripeBalanceService();\r\n\tStripeBalance response = balanceService.Get();\r\n\r\n### Retrieving a specific balance transaction\r\n\r\n\tvar balanceService = new StripeBalanceService();\r\n\tStripeBalanceTransaction transaction = balanceService.Get(*balanceTransactionId*);\r\n\r\n### Listing balance transactions\r\n\r\n\tvar balanceService = new StripeBalanceService();\r\n\tIEnumerable<StripeBalanceTransaction> balanceTransactions = balanceService.List(); // optional StripeBalanceTransactionListOptions\r\n\r\nStripeBalanceTransactionListOptions supports filtering by a [StripeDateFilter](#stripedatefilter-date-filtering) for date created, a [StripeDateFilter](#stripedatefilter-date-filtering) for date available, currency, source, transfer, type, and supports [StripeListOptions](#stripelistoptions-paging) for paging\r\n\r\nDisputes\r\n--------\r\n\r\n### Updating a dispute\r\n\r\n\tvar disputeService = new StripeDisputeService();\r\n\r\n\t// providing the dispute reason is optional\r\n\tStripeDispute stripeDispute = disputeService.Update(*chargeId*, \"customer ate the donut before I charged them, so they said it was free\");\r\n\r\nRecipients\r\n----------\r\n\r\n### Creating a recipient\r\n\r\n\tvar myRecipient = new StripeRecipientCreateOptions();\r\n\tmyRecipient.Name = \"Bacon Industries Limited\";\r\n\tmyRecipient.Type = \"individual\";                                        // \"corporation\" is also valid here.\r\n\tmyRecipient.TaxId = \"000000000\";                                        // optional\r\n\tmyRecipient.Email = \"bacon@example.com\";                                // optional\r\n\tmyRecipient.Description = \"Bacon Industries Ltd. (bacon@example.com)\";  //optional\r\n\r\n\t// if you need this...\r\n\tmyRecipient.Card = new StripeCreditCardOptions()\r\n\t{\r\n\t\t// set this property if using a token\r\n\t\tTokenId = *tokenId*,\r\n\r\n\t\t// set these properties if passing full card details (do not\r\n\t\t// set these properties if you set TokenId)\r\n\t\tNumber = \"4242424242424242\",\r\n\t\tExpirationYear = \"2022\",\r\n\t\tExpirationMonth = \"10\",\r\n\t\tAddressCountry = \"US\",                // optional\r\n\t\tAddressLine1 = \"24 Beef Flank St\",    // optional\r\n\t\tAddressLine2 = \"Apt 24\",              // optional\r\n\t\tAddressCity = \"Biggie Smalls\",        // optional\r\n\t\tAddressState = \"NC\",                  // optional\r\n\t\tAddressZip = \"27617\",                 // optional\r\n\t\tName = \"Joe Meatballs\",               // optional\r\n\t\tCvc = \"1223\"                          // optional\r\n\t}\r\n\r\n\tvar recipientService = new StripeRecipientService();\r\n\tStripeRecipient stripeRecipient = recipientService.Create(myRecipient);\r\n\r\n### Updating a recipient\r\n\r\n\tvar myRecipient = new StripeRecipientUpdateOptions();\r\n\tmyRecipient.Name = \"Bacon Industries Limited\";\r\n\tmyRecipient.TaxId = \"000000000\";                                        // optional\r\n\tmyRecipient.Email = \"bacon@example.com\";                                // optional\r\n\tmyRecipient.Description = \"Bacon Industries Ltd. (bacon@example.com)\";  // optional\r\n\r\n\t// if you need this...\r\n\tmyRecipient.Card = new StripeCreditCardOptions()\r\n\t{\r\n\t\t// set this property if using a token\r\n\t\tTokenId = *tokenId*,\r\n\r\n\t\t// set these properties if passing full card details (do not\r\n\t\t// set these properties if you set TokenId)\r\n\t\tNumber = \"4242424242424242\",\r\n\t\tExpirationYear = \"2022\",\r\n\t\tExpirationMonth = \"10\",\r\n\t\tAddressCountry = \"US\",                // optional\r\n\t\tAddressLine1 = \"24 Beef Flank St\",    // optional\r\n\t\tAddressLine2 = \"Apt 24\",              // optional\r\n\t\tAddressCity = \"Biggie Smalls\",        // optional\r\n\t\tAddressState = \"NC\",                  // optional\r\n\t\tAddressZip = \"27617\",                 // optional\r\n\t\tName = \"Joe Meatballs\",               // optional\r\n\t\tCvc = \"1223\"                          // optional\r\n\t}\r\n\r\n\tvar recipientService = new StripeRecipientService();\r\n\tStripeRecipient stripeRecipient = recipientService.Update(*recipientId*, myRecipient);\r\n\r\n### Retrieving a recipient\r\n\r\n\tvar recipientService = new StripeRecipientService();\r\n\tStripeRecipient stripeRecipient = recipientService.Get(*recipientId*);\r\n\r\n### Deleting a recipient\r\n\r\n\tvar recipientService = new StripeRecipientService();\r\n\trecipientService.Deleted(*recipientId*);\r\n\r\n### List all recipients\r\n\r\n\tvar recipientService = new StripeRecipientService();\r\n\tIEnumerable<StripeRecipient> response = recipientService.List(); // optional StripeRecipientListOptions\r\n\r\nStripeRecipientListOptions supports a verified flag and [StripeListOptions](#stripelistoptions-paging) for paging\r\n\r\nTransfers\r\n---------\r\n\r\n### Creating a transfer to a recipient\r\n\r\n\tvar myTransfer = new StripeTransferCreateOptions();\r\n\tmyTransfer.Amount = 100;\r\n\tmyTransfer.Currency = \"usd\";\r\n\tmyTransfer.Recipient = \"*recipientId*\";          // can also be \"self\" if you want to send to your own account\r\n\tmyTransfer.Description = \"Sales Week #42\";       // optional\r\n\tmyTransfer.StatementDescription = \"Commissions\"; // optional\r\n\r\n\tvar transferService = new StripeTransferService();\r\n\tStripeTransfer stripeTransfer = transferService.Create(myTransfer);\r\n\r\n### Retrieving a transfer\r\n\r\n\tvar transferService = new StripeTransferService();\r\n\tStripeTransfer stripeTransfer = transferService.Get(*transferId*);\r\n\r\n### Cancel a transfer\r\n\r\n\tvar transferService = new StripeTransferService();\r\n\tStripeTransfer stripeTransfer = transferService.Cancel(*transferId*);\r\n\r\n### List all transfers\r\n\r\n\tvar transferService = new StripeTransferService();\r\n\tIEnumerable<StripeTransfer> response = transferService.List(); // optional StripeTransferListOptions\r\n\r\nStripeTransferListOptions supports a RecipientId, Status ('pending', 'paid' or 'failed'), [StripeListOptions](#stripelistoptions-paging) for paging, and a [StripeDateFilter](#stripedatefilter-date-filtering) for date filtering (on both the created and date fields)\r\n\r\nApplication Fees\r\n----------------\r\n\r\nIf you do not specify an amount, the entire application fee is refunded.\r\n\r\n### Retrieving an application fee\r\n\r\n\tvar feeService = new StripeApplicationFeeService();\r\n\tStripeApplicationFee stripeApplicationFee = feeService.Get(*applicationFeeId*);\r\n\r\n### Refunding an application fee\r\n\r\n\tvar feeService = new StripeApplicationFeeService();\r\n\tStripeApplicationFee stripeApplicationFee = feeService.Refund(*applicationFeeId*, *amount*);\r\n\r\nStripeListOptions (paging)\r\n--------------------------\r\n\r\nAll Stripe List methods support paging, using `limit`, `starting_after` and `ending_before` properties.  If you do not specify any options, `limit` will default to 10. Some examples of retrieving paged data from the StripeChargeService:\r\n\r\n\tvar chargeService = new StripeChargeService();\r\n\r\n\t// get the first five results\r\n\tIEnumerable<StripeCharge> firstPage = chargeService.List(new StripeChargeListOptions {\r\n  \tLimit = 5\r\n\t});\r\n\r\n\t// get the next five results\r\n\tIEnumerable<StripeCharge> nextPage = chargeService.List(new StripeChargeListOptions {\r\n  \tLimit = 5,\r\n    StartingAfter = firstPage.Last().Id\r\n\t});\r\n\r\n\t// get the previous five results again\r\n\tIEnumerable<StripeCharge> previousPage = chargeService.List(new StripeChargeListOptions {\r\n\t\tLimit = 5,\r\n\t\tEndingBefore = nextPage.First().Id\r\n\t});\r\n\r\nStripeDateFilter (date filtering)\r\n---------------------------------\r\n\r\nMany of the List methods support parameters to filter by date. To use this, use the `StripeDateFilter` class. You can combine the filters to make complex queries. Some examples are:\r\n\r\n\tvar chargeService = new StripeChargeService();\r\n\r\n\tvar chargesToday = chargeService.List(new StripeChargeListOptions {\r\n\t\tCreated = new StripeDateFilter { GreaterThanOrEqual = DateTime.UtcNow.Date }\r\n\t});\r\n\r\n\tvar chargesYesterday = chargeService.List(new StripeChargeListOptions {\r\n\t\tCreated = new StripeDateFilter {\r\n\t\t\tGreaterThanOrEqual = DateTime.Now.AddDays(-1).Date,\r\n\t\t\tLessThan = DateTime.Now.Date\r\n\t\t}\r\n\t});\r\n\r\nExpandable Properties\r\n---------------------\r\n\r\nMany of the services support *expandable* properties. Setting an expandable property to true means you want the entire object back instead of just the id.\r\n\r\nFor example:\r\n\r\n\tvar chargeService = new StripeChargeService();\r\n\tchargeService.ExpandBalanceTransaction = true;\r\n\tchargeService.ExpandCustomer = true;\r\n\tchargeService.ExpandInvoice = true;\r\n\r\n\tStripeCharge stripeCharge = chargeService.Get(*chargeId*);\r\n\r\nWhen the StripeCharge is returned, the Customer, BalanceTransaction, and Invoice properties will be hydrated objects.\r\n\r\nEvents\r\n------\r\n\r\nStripe sends Events (via webhooks) whenever an associated action occurs. The list of events Stripe sends is documented here: https://stripe.com/docs/api#event_types\r\n\r\n### Receiving events from Stripe\r\n\r\n1) In your application, create a handler that looks something like the below:\r\n\r\n\tnamespace TheBestApplicationEverCreated\r\n\t{\r\n\t\tpublic class StripeHandler : IHttpHandler\r\n\t\t{\r\n\t\t\tpublic bool IsReusable\r\n\t\t\t{\r\n\t\t\t\tget { return true; }\r\n\t\t\t}\r\n\r\n\t\t\tpublic void ProcessRequest(HttpContext context)\r\n\t\t\t{\r\n\t\t\t\tvar json = new StreamReader(context.Request.InputStream).ReadToEnd();\r\n\r\n\t\t\t\tvar stripeEvent = StripeEventUtility.ParseEvent(json);\r\n\r\n\t\t\t\tswitch (stripeEvent.Type)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase StripeEvents.ChargeRefunded:  // all of the types available are listed in StripeEvents\r\n\t\t\t\t\t\tvar stripeCharge = Stripe.Mapper<StripeCharge>.MapFromJson(stripeEvent.Data.Object.ToString());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n2) Create a StripeHandler.ashx in the root of your website (or wherever) that looks like this:\r\n\r\n\t<%@ WebHandler Language=\"C#\" Class=\"StripeHandler\" CodeBehind=\"StripeHandler.cs\" %>\r\n\r\n3) Login to Stripe and go to Account Settings, webhooks - from here, you can setup the url that points to your StripeHandler.ashx for testing.\r\n\r\nWhenever an Event is received, StripeEventUtility.ParseEvent(json) will convert the response into a *StripeEvent* object.\r\n\r\n### Retrieving an event\r\n\r\nIf you have the id and you want to retrieve the event\r\n\r\n\tvar eventService = new StripeEventService();\r\n\tStripeEvent response = eventService.Get(*eventId*)\r\n\r\n### List all events\r\n\r\nYou can list events in the same way everything else works in Stripe.net.\r\n\r\n\tvar eventService = new StripeEventService();\r\n\tIEnumerable<StripeEvent> response = eventService.List(); // optional StripeEventListOptions\r\n\r\nStripeEventListOptions supports a type, [StripeListOptions](#stripelistoptions-paging) for paging, and a [StripeDateFilter](#stripedatefilter-date-filtering) for date filtering\r\n\r\nStripe Connect\r\n--------------\r\n\r\nThe Stripe Connect documentation can be a little intimidating, so I am going to try to break it down a little. Stripe Connect gives you the ability to accept money on behalf of other accounts, \r\nand access or modify connected accounts depending on permissions.\r\n\r\n1) The first thing you need to do is [register your platform](https://dashboard.stripe.com/account/applications/settings) with Stripe Connect. Stripe.net at this time only supports \r\n[Standalone Accounts](https://stripe.com/docs/connect/standalone-accounts), which is very useful because it supports every country Stripe supports. Managed Accounts are a \r\nvaluable service as well, but they are not available in Stripe.net yet.\r\n\r\n2) The next thing to do, is have another party connect to your site. To do this, put a link on your site which will start the authorization process, or you can use a \r\n[Stripe Connect Button](https://stripe.com/about/resources). Your link will need to contain some querystring paramaters:\r\n\r\n\tresponse_type: code\r\n\tclient_id:     *your client id from the stripe connect dashboard*\r\n\tscope:         read_only (default), or read_write (lets you modify their data as well) // this is optional and defaults to read_only\r\n\tredirect_uri:  this is optional, and will return the user to this page when the connection is complete\r\n\tother options are available and you can learn more about them with the [Connect OAuth Reference](https://stripe.com/docs/connect/reference)\r\n\r\n3) When the user clicks the link on your site, they will be prompted to authorize the connection. At this point, they can create a new Stripe account or setup the connection with an existing account.\r\n\r\nYour link will look something like this:\r\n\r\n\thttps://connect.stripe.com/oauth/authorize?response_type=code&client_id=*your_client_id_from_the_stripe_connect_dashboard&scope=read_write\r\n\r\n4) The link above will return a code when the setup is complete (and also return back to your redirect_uri if specified). With this code, you can make a request to Stripe to get the StripeUserId for accessing\r\ntheir account.\r\n\r\nIn Stripe.net, you can accomplish this with the following code:\r\n\r\n\tvar stripeOAuthTokenService = new StripeOAuthTokenService();\r\n\tvar stripeOAuthTokeCreateOptions = new StripeOAuthTokenCreateOptions()\r\n\t{\r\n\t\tClientSecret = ConfigurationManager.AppSettings[\"StripeApiKey\"],\r\n\t\tCode = *the code returned from above*,\r\n\t\tGrantType = \"authorization_code\"\r\n\t};\r\n\r\n\tStripeOAuthToken stripeOAuthToken = stripeOAuthTokenService.Create(_stripeOAuthTokeCreateOptions);\r\n\r\n5) You're done! Whenever you need to access the connected account, you simply need the StripeUserId from the StripeOAuthToken to be passed as part of the [StripeRequestOptions](#striperequestoptions) \r\nwhich all service calls now support as an optional parameter.\r\n\r\nFor example, to get the plans on the connected account, you could run the following code:\r\n\r\n\tvar planService = new StripePlanService();\r\n\tStripePlan response = planService.List(null /* StripeListOptions */, new StripeRequestOptions() { StripeConnectAccountId = *the StripeUserId on the StripeOAuthToken above* });\r\n\r\nDepending on if your permissions are read_write or read_only, you can do anything on the connected account you can do on your own account just by passing the StripeUserId as\r\npart of StripeRequestOptions.\r\n\r\nStripeRequestOptions\r\n--------------------\r\n\r\nAll of the service methods accept an optional StripeRequestOptions object. This is used if you need an [Idempotency Key](https://stripe.com/docs/api?lang=curl#idempotent_requests), \r\nif you are using Stripe Connect, or if you want to pass the ApiKey on each method.\r\n\r\n\tvar requestOptions = new StripeRequestOptions();\r\n\trequestOptions.ApiKey = *optional*;              // this is not required unless you choose to pass the apikey on every service call\r\n\trequestOptions.IdempotencyKey = \"some string\";   // this is for Idempotent Requests - https://stripe.com/docs/api?lang=curl#idempotent_requests\r\n\trequestOptions.StripeConnectAccountId = \"acct_*\" // if you are using Stripe Connect and want to issue a request on the connected account\r\n\r\nErrors\r\n------\r\n\r\nAny errors that occur on any of the services will throw a StripeException with the message returned from Stripe. It is a good idea to run your service calls in a try and catch StripeException.\r\n\r\nThe StripeException contains and HttpStatusCode and a StripeError entity. The StripeError entity contains the type, message, code and param. For more infomation, review the Errors section\r\nof stripe here: https://stripe.com/docs/api#errors\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}